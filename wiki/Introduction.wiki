IRC-API is basically built on 3 components.

1) the IRC server message building layer where the raw server message is directly transformed into an instance of _IMessage_.

2) the _IMessage_ listeners, dubbed as _IMessageListener_, that can register for incoming message notifications through the _IRCApi_ interface.

3) the _IRCApi_ interface that offers the ability to execute commands in both synchronous and asynchronous programming style.
<br/>
Internally, IRC-API uses an IRC session to execute IRC commands, and awaits for notifications.

Optionally, the user can choose whether the API should save the IRC state by setting the IRCApiImpl's _aSaveIRCState_ constructor parameter to true.  In this case, the state can now be queried by using the _IIRCState_ interface.

*Synchronous use of the API:*

{{{
_api.joinChannel("#ircapi");
}}}

Here, the API user doesn't provide a feedback on whether the channel join was successful.  The user will have to extend _IMessage_, and manually listen to server events in this case.

*Asynchronous use of the API:*

{{{
_api.joinChannelAsync("#ircapi", new Callback<IRCChannel>()
{
	@Override
	public void onSuccess(IRCChannel aObject)
	{
		// do something
	}

	@Override
	public void onFailure(String aErrorMessage)
	{
	}
});
}}}

Here, the client awaits for the callback to be invoked, and hence, will be informed about whether the join channel command was successful.  On channel join, the user will receive an _IRCChannel_ object which has all the available information about the IRC channel.

*Saving IRC state*

Saving IRC State is implemented in the API, and can be configured as shown in the following example:

{{{
IRCApi _api = new IRCApiImpl(true);
}}}

The state can then be obtained from the _IRCApi.connect_'s _Callback`<IIRCState>`_ parameter, and it basically inherits the _IIRCState_ interface.

{{{
public interface IIRCState
{
	String getNickname();

	List<String> getAltNicks();

	String getRealname();

	String getIdent();

	List<IRCChannel> getChannels();

	IRCChannel getChannelByName(String aChannelName);

	IRCServer getServer();

	IRCServerOptions getServerOptions();
	
	boolean isConnected();
}
}}}