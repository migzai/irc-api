IRC-API is basically built on 3 components.

1) the IRC server message building layer where the raw server message is directly transformed into an instance of IMessage.

2) the _IMessage_ listeners, dubbed as _IMessageListener_, that can register for incoming message notifications through the _IRCApi_ interface.

3) the _IRCApi_ interface that offers the ability to execute commands in both synchronous and asynchronous programming style.
<br/>
Internally, IRC-API uses an IRC session to execute IRC commands, and awaits for notifications.

Optionally, the user can choose whether the API should save the IRC state by setting the IRCApiImpl's _aSaveIRCState_ constructor parameter to true.  In this case, the state can now be queried by using the _IIRCState_ interface.

*Synchronous use of the API:*

{{{
_api.joinChannel("#ircapi");
}}}

Here, there's no promise that the client joined the #ircapi channel.

*Asynchronous use of the API:*

{{{
_api.joinChannelAsync("#ircapi", new Callback<IRCChannel>()
{
	@Override
	public void onSuccess(IRCChannel aObject)
	{
		// do something
	}

	@Override
	public void onFailure(String aErrorMessage)
	{
	}
});
}}}

Here, the client awaits for the callback to be invoked, and hence, the client will be informed about whether the join channel command was successful or not.